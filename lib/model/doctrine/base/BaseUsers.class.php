<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Users', 'doctrine');

/**
 * BaseUsers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $role_id
 * @property string $username
 * @property string $password
 * @property integer $active
 * @property string $name
 * @property string $surname
 * @property string $email
 * @property string $nickname
 * @property Roles $Roles
 * @property Doctrine_Collection $Articles
 * @property Doctrine_Collection $Comments
 * 
 * @method integer             getId()       Returns the current record's "id" value
 * @method integer             getRoleId()   Returns the current record's "role_id" value
 * @method string              getUsername() Returns the current record's "username" value
 * @method string              getPassword() Returns the current record's "password" value
 * @method integer             getActive()   Returns the current record's "active" value
 * @method string              getName()     Returns the current record's "name" value
 * @method string              getSurname()  Returns the current record's "surname" value
 * @method string              getEmail()    Returns the current record's "email" value
 * @method string              getNickname() Returns the current record's "nickname" value
 * @method Roles               getRoles()    Returns the current record's "Roles" value
 * @method Doctrine_Collection getArticles() Returns the current record's "Articles" collection
 * @method Doctrine_Collection getComments() Returns the current record's "Comments" collection
 * @method Users               setId()       Sets the current record's "id" value
 * @method Users               setRoleId()   Sets the current record's "role_id" value
 * @method Users               setUsername() Sets the current record's "username" value
 * @method Users               setPassword() Sets the current record's "password" value
 * @method Users               setActive()   Sets the current record's "active" value
 * @method Users               setName()     Sets the current record's "name" value
 * @method Users               setSurname()  Sets the current record's "surname" value
 * @method Users               setEmail()    Sets the current record's "email" value
 * @method Users               setNickname() Sets the current record's "nickname" value
 * @method Users               setRoles()    Sets the current record's "Roles" value
 * @method Users               setArticles() Sets the current record's "Articles" collection
 * @method Users               setComments() Sets the current record's "Comments" collection
 * 
 * @package    simplenews
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUsers extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('users');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('role_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('password', 'string', 90, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 90,
             ));
        $this->hasColumn('active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('surname', 'string', 80, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 80,
             ));
        $this->hasColumn('email', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('nickname', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Roles', array(
             'local' => 'role_id',
             'foreign' => 'id'));

        $this->hasMany('Articles', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Comments', array(
             'local' => 'id',
             'foreign' => 'user_id'));
    }
}