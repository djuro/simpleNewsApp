<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Articles', 'doctrine');

/**
 * BaseArticles
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property string $text
 * @property integer $category_id
 * @property timestamp $published_at
 * @property integer $read_count
 * @property integer $user_id
 * @property integer $published
 * @property string $photo
 * @property Categories $Categories
 * @property Users $Users
 * @property Doctrine_Collection $Tags
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $ArticlesTags
 * 
 * @method integer             getId()           Returns the current record's "id" value
 * @method string              getTitle()        Returns the current record's "title" value
 * @method string              getText()         Returns the current record's "text" value
 * @method integer             getCategoryId()   Returns the current record's "category_id" value
 * @method timestamp           getPublishedAt()  Returns the current record's "published_at" value
 * @method integer             getReadCount()    Returns the current record's "read_count" value
 * @method integer             getUserId()       Returns the current record's "user_id" value
 * @method integer             getPublished()    Returns the current record's "published" value
 * @method string              getPhoto()        Returns the current record's "photo" value
 * @method Categories          getCategories()   Returns the current record's "Categories" value
 * @method Users               getUsers()        Returns the current record's "Users" value
 * @method Doctrine_Collection getTags()         Returns the current record's "Tags" collection
 * @method Doctrine_Collection getComments()     Returns the current record's "Comments" collection
 * @method Doctrine_Collection getArticlesTags() Returns the current record's "ArticlesTags" collection
 * @method Articles            setId()           Sets the current record's "id" value
 * @method Articles            setTitle()        Sets the current record's "title" value
 * @method Articles            setText()         Sets the current record's "text" value
 * @method Articles            setCategoryId()   Sets the current record's "category_id" value
 * @method Articles            setPublishedAt()  Sets the current record's "published_at" value
 * @method Articles            setReadCount()    Sets the current record's "read_count" value
 * @method Articles            setUserId()       Sets the current record's "user_id" value
 * @method Articles            setPublished()    Sets the current record's "published" value
 * @method Articles            setPhoto()        Sets the current record's "photo" value
 * @method Articles            setCategories()   Sets the current record's "Categories" value
 * @method Articles            setUsers()        Sets the current record's "Users" value
 * @method Articles            setTags()         Sets the current record's "Tags" collection
 * @method Articles            setComments()     Sets the current record's "Comments" collection
 * @method Articles            setArticlesTags() Sets the current record's "ArticlesTags" collection
 * 
 * @package    simplenews
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArticles extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('articles');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 180, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 180,
             ));
        $this->hasColumn('text', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('category_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('published_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('read_count', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('published', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('photo', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Categories', array(
             'local' => 'category_id',
             'foreign' => 'id'));

        $this->hasOne('Users', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('Tags', array(
             'refClass' => 'ArticlesTags',
             'local' => 'Articles',
             'foreign' => 'Tags'));

        $this->hasMany('Comments', array(
             'local' => 'id',
             'foreign' => 'article_id'));

        $this->hasMany('ArticlesTags', array(
             'local' => 'id',
             'foreign' => 'articles_id'));
    }
}